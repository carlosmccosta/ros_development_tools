# List disks
sudo fdisk -l
lsblk


# Scan partition for damaged blocks
sudo badblocks -svn /dev/nvme0n1pX > /tmp/bad-blocks.txt


# Tell OS to not use the bad blocks
sudo e2fsck -l /tmp/bad-blocks.txt /dev/nvme0n1pX

Disks have spare blocks that are swapped automatically by the disk firmware.
As such, badblocks may report 0 bad blocks in the last scan, but the drive may have detected and replaced many bad blocks.
For checking that, its necessary to analyze the the available_spare and percentage_used fields reported by the drive using the nvme or smartctl commands.


# Check NVME

sudo apt-get install nvme-cli
sudo nvme smart-log /dev/nvme0
sudo nvme error-log /dev/nvme0

https://www.nvmetools.com/post/nvme-health

The wear level is given by the percentage_used.
Percentage of replacement blocks is given in available_spare.
When reaching below available_spare_threshold, the ssh is close to failure.


# Check smart data
https://help.ubuntu.com/community/Smartmontools
sudo apt install smartmontools
udo apt install gsmartcontrol

sudo smartctl -i /dev/sda # check smart data capability
sudo smartctl -s /dev/sda # enable smart data
sudo smartctl -a /dev/sda # view smart data
sudo smartctl -c /dev/sda # check how long the test takes
sudo smartctl -t long /dev/sda # test drive


# For forcing the EXT4 filesystem check at every boot:
https://www.baeldung.com/linux/force-file-system-check-every-boot

Edit the /etc/fstab file and make sure the partitions you want to check have the fs_passno with number 1 or 2.

Example (fs_passno is the last number):
UUID=2e5d42e1-c6d4-4120-b14d-dd712061f957 /               ext4    errors=remount-ro 0       1

Edit the parameter GRUB_CMDLINE_LINUX_DEFAULT in file /etc/default/grub and add at the end the fsck options:
sudo nano /etc/default/grub
GRUB_CMDLINE_LINUX_DEFAULT="quiet splash fsck.mode=force fsck.repair=yes"

Then,
sudo update-grub

Alternative to using the grub parameters:
sudo tune2fs -c 1 /dev/nvme0


# Check fsck log
sudo more /run/initramfs/fsck.log
journalctl -u systemd-fsck*


# Check ext4 partition (make sure it is not mounted first)
unmount /dev/nvme0n1pX
e2fsck -vf /dev/nvme0n1pX


# Check fat32 (make sure it is not mounted first)
sudo dosfsck -w -r -l -a -v -t /dev/nvme0n1pX


# Check root partitions
1 - Run:
shutdown -Fr now
2 - Create the file:
touch /forcefsck
3 - During the grub boot go to advanced options, start in recovery mode and then run fsck


# Find files with names containing invalid Windows characters:
find . -name '*[<>:"/\\|?*%]*' -o -name '*[ \.]' -o -name '[ ]*'
find . | grep -P "[\x00-\x1F]"

# Find files with characters not typical for Portuguese language
find . | grep -P "[^\x20\x28\x29\x2b-\x39\x41-\x5a\x5f\x61-\x7a\xba\xc0-\xc3\xc7-\xca\xcc-\xce\xd2-\xd5\xd9-\xdb\xe0-\xe3\xe7-\xea\xec-\xee\xf2-\xf5\xf9-\xfb]"

# Find duplicate files without taking into consideration the character case
find . | sort -f | uniq -i -d


# Find symbolic links
find . -type l


# Find hard links and their original files
find . -links +1


# Find all files associated with a hard link
find . -samefile /path/to/file


# Find files with more than a given path size
find -regextype posix-extended -regex '.{242,}'

# Find files with more than a given filename size
find | egrep '/[^/]{242,}$'


# Sort file paths in file by their length
cat paths.txt | awk '{ print length, $0 }' | sort -n | cut -d" " -f2- > paths_sorted.txt


# Hash folder
find /path/to/dir/ -type f -exec sha512sum {} \; | sha512sum


# Count files recursively
find /path/to/dir/ -type f | wc -l
